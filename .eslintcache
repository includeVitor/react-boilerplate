[{"P:\\Projects\\reactjs2.0\\src\\App.tsx":"1","P:\\Projects\\reactjs2.0\\src\\index.tsx":"2","P:\\Projects\\reactjs2.0\\src\\store\\index.ts":"3","P:\\Projects\\reactjs2.0\\src\\store\\ducks\\auth.ts":"4","P:\\Projects\\reactjs2.0\\src\\route\\index.tsx":"5","P:\\Projects\\reactjs2.0\\src\\pages\\Login.tsx":"6","P:\\Projects\\reactjs2.0\\src\\route\\CONSTANTS.tsx":"7","P:\\Projects\\reactjs2.0\\src\\services\\auth.ts":"8","P:\\Projects\\reactjs2.0\\src\\services\\index.ts":"9","P:\\Projects\\reactjs2.0\\src\\services\\api.ts":"10","P:\\Projects\\reactjs2.0\\src\\route\\CheckAuthentication.ts":"11","P:\\Projects\\reactjs2.0\\src\\pages\\Main\\index.tsx":"12","P:\\Projects\\reactjs2.0\\src\\route\\PrivateRoute\\index.tsx":"13","P:\\Projects\\reactjs2.0\\src\\route\\PublicRoute\\index.tsx":"14","P:\\Projects\\reactjs2.0\\src\\store\\ducks\\ui.ts":"15","P:\\Projects\\reactjs2.0\\src\\store\\ducks\\toast.ts":"16"},{"size":474,"mtime":1607538100278,"results":"17","hashOfConfig":"18"},{"size":279,"mtime":1606874746364,"results":"19","hashOfConfig":"18"},{"size":484,"mtime":1607370375069,"results":"20","hashOfConfig":"18"},{"size":963,"mtime":1607368940019,"results":"21","hashOfConfig":"18"},{"size":709,"mtime":1607354553616,"results":"22","hashOfConfig":"18"},{"size":6032,"mtime":1607801105356,"results":"23","hashOfConfig":"18"},{"size":111,"mtime":1607349229552,"results":"24","hashOfConfig":"18"},{"size":1915,"mtime":1607789133831,"results":"25","hashOfConfig":"18"},{"size":67,"mtime":1606934555827,"results":"26","hashOfConfig":"18"},{"size":131,"mtime":1606938021639,"results":"27","hashOfConfig":"18"},{"size":564,"mtime":1607351842749,"results":"28","hashOfConfig":"18"},{"size":328,"mtime":1607367304979,"results":"29","hashOfConfig":"18"},{"size":638,"mtime":1607367648406,"results":"30","hashOfConfig":"18"},{"size":635,"mtime":1607354874073,"results":"31","hashOfConfig":"18"},{"size":1500,"mtime":1607371110924,"results":"32","hashOfConfig":"18"},{"size":2051,"mtime":1607373505881,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yeg8x",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"P:\\Projects\\reactjs2.0\\src\\App.tsx",[],"P:\\Projects\\reactjs2.0\\src\\index.tsx",[],["72","73"],"P:\\Projects\\reactjs2.0\\src\\store\\index.ts",[],"P:\\Projects\\reactjs2.0\\src\\store\\ducks\\auth.ts",[],"P:\\Projects\\reactjs2.0\\src\\route\\index.tsx",[],"P:\\Projects\\reactjs2.0\\src\\pages\\Login.tsx",["74","75","76","77"],"import React, { useState } from \"react\"\r\nimport { authService } from \"../services\"\r\nimport { UserRequest, UserRequestError } from \"../types\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TouchAppIcon from '@material-ui/icons/TouchApp';\r\n\r\nconst LoginPage: React.FC = (props : any) => { \r\n    \r\n    const history =  useHistory()\r\n    \r\n    const [values, setValues] = useState({\r\n        email: \"\",\r\n        password: \"\"\r\n    } as UserRequest)\r\n \r\n    const [errors, setErrors] = useState({} as UserRequestError)\r\n\r\n    const hasError = (field: string) => !!errors[field]\r\n    const getError = (field: string) => errors[field]   \r\n\r\n    const handleChange = (e: any) => {\r\n        e.persist();\r\n        setValues(values => ({\r\n            ...values,\r\n            [e.target.name]: e.target.value\r\n         }));\r\n    }\r\n\r\n    const handleSubmit = (e: any) => {\r\n        e.preventDefault()\r\n\r\n        // client side validation\r\n        const form = e.target\r\n        const isValid = form.checkValidity()\r\n        const formData = new FormData(form)\r\n        const errorMessages = Array.from(formData.keys()).reduce((acc: any, key: any) => {\r\n            acc[key] = form.elements[key].validationMessage\r\n            return acc\r\n        },{})\r\n\r\n        setErrors(errorMessages)\r\n\r\n        if(isValid){\r\n            const data = Array.from(formData.keys()).reduce((acc: any,key: any) => {\r\n                acc[key] = formData.get(key)\r\n                return acc\r\n            }, {})\r\n        }\r\n\r\n        const userData : UserRequest ={\r\n            email: values.email,\r\n            password: values.password\r\n        }\r\n        \r\n        //authService.loginUser(userData, history)    \r\n    }\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        main:{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            flex: '1 1 0%',\r\n            width: '100%',\r\n            maxWidth: 1000,\r\n            padding: 32,\r\n            justifyContent: 'center'\r\n        },\r\n        content : {\r\n            width: '100%',\r\n            display: 'flex',           \r\n            justifyContent: 'space-between'\r\n        },\r\n        item: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignSelf: 'center',\r\n            width: '100%',\r\n            maxWidth: 480,\r\n            alignItems: 'center'\r\n        },\r\n        form: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignSelf: 'center',\r\n            width: '100%',\r\n            maxWidth: 480,\r\n            alignItems: 'center',\r\n            padding: 68,\r\n            borderRadius: 5,\r\n            border: '1px solid #dadce0',\r\n            backgroundColor: '#fff'\r\n        },\r\n        button : {\r\n            marginTop: 15,\r\n            justifyContent: 'flex-end',\r\n            display: 'flex'\r\n        }\r\n    }));\r\n    \r\n    const classes = useStyles();\r\n    \r\n    return (  \r\n\r\n        <Grid className={classes.main}>\r\n\r\n            <Grid className={classes.content}>\r\n                    \r\n                <Grid  className={classes.item}>\r\n\r\n                    <TouchAppIcon style={{ fontSize: 75, marginBottom: 10 }}/>\r\n\r\n                    <Typography variant=\"h3\" component=\"h3\">\r\n                        Entre na plataforma\r\n                    </Typography>\r\n            \r\n                </Grid>\r\n\r\n                <form className={classes.form} noValidate onSubmit={handleSubmit}> \r\n                    <Grid container>\r\n                        \r\n                        <Grid item lg={12}>\r\n                            <TextField\r\n                                type=\"email\"\r\n                                id=\"standard-full-width\"\r\n                                value={values.email}\r\n                                name=\"email\"\r\n                                onChange={handleChange}\r\n                                margin=\"normal\"\r\n                                label=\"E-mail\" \r\n                                variant=\"outlined\"\r\n                                autoComplete=\"email\"\r\n                                helperText={getError('email')}\r\n                                error={hasError('email')}\r\n                                autoFocus\r\n                                fullWidth\r\n                                required\r\n                            />  \r\n                        </Grid>\r\n                        \r\n                        <Grid item lg={12}>\r\n                            <TextField\r\n                                type=\"password\"\r\n                                id=\"standard-full-width\"\r\n                                value={values.password}\r\n                                name=\"password\"\r\n                                onChange={handleChange}\r\n                                label=\"Senha\" \r\n                                variant=\"outlined\"\r\n                                helperText={getError('password')}\r\n                                error={hasError('password')}\r\n                                required\r\n                                fullWidth\r\n                            />  \r\n                        </Grid>\r\n\r\n                         <Grid item lg={12} className={classes.button}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"medium\"\r\n                            >\r\n                                Entrar\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </form>\r\n                \r\n            </Grid>\r\n        </Grid>\r\n    )\r\n\r\n}\r\n \r\nexport default LoginPage\r\n","P:\\Projects\\reactjs2.0\\src\\route\\CONSTANTS.tsx",[],"P:\\Projects\\reactjs2.0\\src\\services\\auth.ts",["78"],"import api from './api'\r\nimport { UserRequest, Error, Errors, Toast } from '../types'\r\nimport { login, logout } from \"../store/ducks/auth\"\r\nimport { clear_errors, set_errors } from \"../store/ducks/ui\"\r\nimport { error as ToastError } from \"../store/ducks/toast\"\r\nimport store from \"../store\"\r\n\r\nexport const authService = {\r\n    loginUser\r\n}\r\n\r\nasync function loginUser(user : UserRequest, history : any){\r\n\r\n    try{\r\n\r\n        let result = await api.post(`/login`,{email : user.email, password : user.password})\r\n        if(result.data.success){\r\n\r\n            //auth \r\n            const token = `Bearer ${result.data.data.accessToken}`\r\n            localStorage.setItem('token', token)\r\n            api.defaults.headers.common['Authorization'] = token\r\n            \r\n            //dispatch\r\n            store.dispatch(login())\r\n            store.dispatch(clear_errors())\r\n\r\n            //route\r\n            history.push(\"/Main\")\r\n            \r\n        }\r\n\r\n    }catch(error){\r\n\r\n        if('reponse' in error &&\r\n            'data' in error.response){ \r\n            \r\n            let data : any = error.response.data\r\n            var items: Error[] = []\r\n            \r\n            data.errors.forEach((e: string) => {                \r\n                items.push({description: e})\r\n            });\r\n\r\n            const errors : Errors = ({\r\n                code :  error.response.status,\r\n                errors : items\r\n            })\r\n\r\n            store.dispatch(set_errors(errors))\r\n\r\n            const toast : Toast = {\r\n                message: errors.errors.map((e)=> ` - ${e.description}` ).join()\r\n            }\r\n\r\n            store.dispatch(ToastError(toast))\r\n\r\n        }else{\r\n\r\n            const toast : Toast = {\r\n                message: \"Não foi possível acessar o sistema, tente novamente mais tarde\"\r\n            }\r\n\r\n            store.dispatch(ToastError(toast))\r\n        }      \r\n    }    \r\n}","P:\\Projects\\reactjs2.0\\src\\services\\index.ts",[],["79","80"],"P:\\Projects\\reactjs2.0\\src\\services\\api.ts",[],"P:\\Projects\\reactjs2.0\\src\\route\\CheckAuthentication.ts",[],["81","82"],"P:\\Projects\\reactjs2.0\\src\\pages\\Main\\index.tsx",[],"P:\\Projects\\reactjs2.0\\src\\route\\PrivateRoute\\index.tsx",[],"P:\\Projects\\reactjs2.0\\src\\route\\PublicRoute\\index.tsx",[],["83","84"],"P:\\Projects\\reactjs2.0\\src\\store\\ducks\\ui.ts",[],"P:\\Projects\\reactjs2.0\\src\\store\\ducks\\toast.ts",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},{"ruleId":"89","severity":1,"message":"93","line":15,"column":11,"nodeType":"91","messageId":"92","endLine":15,"endColumn":18},{"ruleId":"89","severity":1,"message":"94","line":50,"column":19,"nodeType":"91","messageId":"92","endLine":50,"endColumn":23},{"ruleId":"89","severity":1,"message":"95","line":56,"column":15,"nodeType":"91","messageId":"92","endLine":56,"endColumn":37},{"ruleId":"89","severity":1,"message":"96","line":3,"column":17,"nodeType":"91","messageId":"92","endLine":3,"endColumn":23},{"ruleId":"85","replacedBy":"97"},{"ruleId":"87","replacedBy":"98"},{"ruleId":"85","replacedBy":"99"},{"ruleId":"87","replacedBy":"100"},{"ruleId":"85","replacedBy":"101"},{"ruleId":"87","replacedBy":"102"},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'authService' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'data' is assigned a value but never used.","'userData' is assigned a value but never used.","'logout' is defined but never used.",["103"],["104"],["103"],["104"],["103"],["104"],"no-global-assign","no-unsafe-negation"]